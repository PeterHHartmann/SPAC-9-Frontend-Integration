// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api/ent/language"
	"api/ent/movie"
	"api/ent/moviequote"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MovieQuote is the model entity for the MovieQuote schema.
type MovieQuote struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Quote holds the value of the "quote" field.
	Quote string `json:"quote,omitempty"`
	// Context holds the value of the "context" field.
	Context string `json:"context,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MovieQuoteQuery when eager-loading is set.
	Edges           MovieQuoteEdges `json:"edges"`
	language_quotes *int
	movie_quotes    *int
	selectValues    sql.SelectValues
}

// MovieQuoteEdges holds the relations/edges for other nodes in the graph.
type MovieQuoteEdges struct {
	// Movie holds the value of the movie edge.
	Movie *Movie `json:"movie,omitempty"`
	// Language holds the value of the language edge.
	Language *Language `json:"language,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MovieOrErr returns the Movie value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MovieQuoteEdges) MovieOrErr() (*Movie, error) {
	if e.Movie != nil {
		return e.Movie, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: movie.Label}
	}
	return nil, &NotLoadedError{edge: "movie"}
}

// LanguageOrErr returns the Language value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MovieQuoteEdges) LanguageOrErr() (*Language, error) {
	if e.Language != nil {
		return e.Language, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: language.Label}
	}
	return nil, &NotLoadedError{edge: "language"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MovieQuote) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case moviequote.FieldID:
			values[i] = new(sql.NullInt64)
		case moviequote.FieldQuote, moviequote.FieldContext:
			values[i] = new(sql.NullString)
		case moviequote.FieldCreatedAt, moviequote.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case moviequote.ForeignKeys[0]: // language_quotes
			values[i] = new(sql.NullInt64)
		case moviequote.ForeignKeys[1]: // movie_quotes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MovieQuote fields.
func (mq *MovieQuote) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case moviequote.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mq.ID = int(value.Int64)
		case moviequote.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mq.CreatedAt = value.Time
			}
		case moviequote.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mq.UpdatedAt = value.Time
			}
		case moviequote.FieldQuote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field quote", values[i])
			} else if value.Valid {
				mq.Quote = value.String
			}
		case moviequote.FieldContext:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field context", values[i])
			} else if value.Valid {
				mq.Context = value.String
			}
		case moviequote.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field language_quotes", value)
			} else if value.Valid {
				mq.language_quotes = new(int)
				*mq.language_quotes = int(value.Int64)
			}
		case moviequote.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field movie_quotes", value)
			} else if value.Valid {
				mq.movie_quotes = new(int)
				*mq.movie_quotes = int(value.Int64)
			}
		default:
			mq.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MovieQuote.
// This includes values selected through modifiers, order, etc.
func (mq *MovieQuote) Value(name string) (ent.Value, error) {
	return mq.selectValues.Get(name)
}

// QueryMovie queries the "movie" edge of the MovieQuote entity.
func (mq *MovieQuote) QueryMovie() *MovieQuery {
	return NewMovieQuoteClient(mq.config).QueryMovie(mq)
}

// QueryLanguage queries the "language" edge of the MovieQuote entity.
func (mq *MovieQuote) QueryLanguage() *LanguageQuery {
	return NewMovieQuoteClient(mq.config).QueryLanguage(mq)
}

// Update returns a builder for updating this MovieQuote.
// Note that you need to call MovieQuote.Unwrap() before calling this method if this MovieQuote
// was returned from a transaction, and the transaction was committed or rolled back.
func (mq *MovieQuote) Update() *MovieQuoteUpdateOne {
	return NewMovieQuoteClient(mq.config).UpdateOne(mq)
}

// Unwrap unwraps the MovieQuote entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mq *MovieQuote) Unwrap() *MovieQuote {
	_tx, ok := mq.config.driver.(*txDriver)
	if !ok {
		panic("ent: MovieQuote is not a transactional entity")
	}
	mq.config.driver = _tx.drv
	return mq
}

// String implements the fmt.Stringer.
func (mq *MovieQuote) String() string {
	var builder strings.Builder
	builder.WriteString("MovieQuote(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mq.ID))
	builder.WriteString("created_at=")
	builder.WriteString(mq.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mq.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("quote=")
	builder.WriteString(mq.Quote)
	builder.WriteString(", ")
	builder.WriteString("context=")
	builder.WriteString(mq.Context)
	builder.WriteByte(')')
	return builder.String()
}

// MovieQuotes is a parsable slice of MovieQuote.
type MovieQuotes []*MovieQuote
