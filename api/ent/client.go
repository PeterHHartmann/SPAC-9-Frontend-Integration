// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"api/ent/migrate"

	"api/ent/character"
	"api/ent/movie"
	"api/ent/moviequote"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Character is the client for interacting with the Character builders.
	Character *CharacterClient
	// Movie is the client for interacting with the Movie builders.
	Movie *MovieClient
	// MovieQuote is the client for interacting with the MovieQuote builders.
	MovieQuote *MovieQuoteClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Character = NewCharacterClient(c.config)
	c.Movie = NewMovieClient(c.config)
	c.MovieQuote = NewMovieQuoteClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Character:  NewCharacterClient(cfg),
		Movie:      NewMovieClient(cfg),
		MovieQuote: NewMovieQuoteClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Character:  NewCharacterClient(cfg),
		Movie:      NewMovieClient(cfg),
		MovieQuote: NewMovieQuoteClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Character.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Character.Use(hooks...)
	c.Movie.Use(hooks...)
	c.MovieQuote.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Character.Intercept(interceptors...)
	c.Movie.Intercept(interceptors...)
	c.MovieQuote.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CharacterMutation:
		return c.Character.mutate(ctx, m)
	case *MovieMutation:
		return c.Movie.mutate(ctx, m)
	case *MovieQuoteMutation:
		return c.MovieQuote.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CharacterClient is a client for the Character schema.
type CharacterClient struct {
	config
}

// NewCharacterClient returns a client for the Character from the given config.
func NewCharacterClient(c config) *CharacterClient {
	return &CharacterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `character.Hooks(f(g(h())))`.
func (c *CharacterClient) Use(hooks ...Hook) {
	c.hooks.Character = append(c.hooks.Character, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `character.Intercept(f(g(h())))`.
func (c *CharacterClient) Intercept(interceptors ...Interceptor) {
	c.inters.Character = append(c.inters.Character, interceptors...)
}

// Create returns a builder for creating a Character entity.
func (c *CharacterClient) Create() *CharacterCreate {
	mutation := newCharacterMutation(c.config, OpCreate)
	return &CharacterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Character entities.
func (c *CharacterClient) CreateBulk(builders ...*CharacterCreate) *CharacterCreateBulk {
	return &CharacterCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CharacterClient) MapCreateBulk(slice any, setFunc func(*CharacterCreate, int)) *CharacterCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CharacterCreateBulk{err: fmt.Errorf("calling to CharacterClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CharacterCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CharacterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Character.
func (c *CharacterClient) Update() *CharacterUpdate {
	mutation := newCharacterMutation(c.config, OpUpdate)
	return &CharacterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CharacterClient) UpdateOne(ch *Character) *CharacterUpdateOne {
	mutation := newCharacterMutation(c.config, OpUpdateOne, withCharacter(ch))
	return &CharacterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CharacterClient) UpdateOneID(id int) *CharacterUpdateOne {
	mutation := newCharacterMutation(c.config, OpUpdateOne, withCharacterID(id))
	return &CharacterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Character.
func (c *CharacterClient) Delete() *CharacterDelete {
	mutation := newCharacterMutation(c.config, OpDelete)
	return &CharacterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CharacterClient) DeleteOne(ch *Character) *CharacterDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CharacterClient) DeleteOneID(id int) *CharacterDeleteOne {
	builder := c.Delete().Where(character.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CharacterDeleteOne{builder}
}

// Query returns a query builder for Character.
func (c *CharacterClient) Query() *CharacterQuery {
	return &CharacterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCharacter},
		inters: c.Interceptors(),
	}
}

// Get returns a Character entity by its id.
func (c *CharacterClient) Get(ctx context.Context, id int) (*Character, error) {
	return c.Query().Where(character.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CharacterClient) GetX(ctx context.Context, id int) *Character {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuotes queries the quotes edge of a Character.
func (c *CharacterClient) QueryQuotes(ch *Character) *MovieQuoteQuery {
	query := (&MovieQuoteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(character.Table, character.FieldID, id),
			sqlgraph.To(moviequote.Table, moviequote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, character.QuotesTable, character.QuotesColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CharacterClient) Hooks() []Hook {
	return c.hooks.Character
}

// Interceptors returns the client interceptors.
func (c *CharacterClient) Interceptors() []Interceptor {
	return c.inters.Character
}

func (c *CharacterClient) mutate(ctx context.Context, m *CharacterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CharacterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CharacterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CharacterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CharacterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Character mutation op: %q", m.Op())
	}
}

// MovieClient is a client for the Movie schema.
type MovieClient struct {
	config
}

// NewMovieClient returns a client for the Movie from the given config.
func NewMovieClient(c config) *MovieClient {
	return &MovieClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `movie.Hooks(f(g(h())))`.
func (c *MovieClient) Use(hooks ...Hook) {
	c.hooks.Movie = append(c.hooks.Movie, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `movie.Intercept(f(g(h())))`.
func (c *MovieClient) Intercept(interceptors ...Interceptor) {
	c.inters.Movie = append(c.inters.Movie, interceptors...)
}

// Create returns a builder for creating a Movie entity.
func (c *MovieClient) Create() *MovieCreate {
	mutation := newMovieMutation(c.config, OpCreate)
	return &MovieCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Movie entities.
func (c *MovieClient) CreateBulk(builders ...*MovieCreate) *MovieCreateBulk {
	return &MovieCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MovieClient) MapCreateBulk(slice any, setFunc func(*MovieCreate, int)) *MovieCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MovieCreateBulk{err: fmt.Errorf("calling to MovieClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MovieCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MovieCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Movie.
func (c *MovieClient) Update() *MovieUpdate {
	mutation := newMovieMutation(c.config, OpUpdate)
	return &MovieUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MovieClient) UpdateOne(m *Movie) *MovieUpdateOne {
	mutation := newMovieMutation(c.config, OpUpdateOne, withMovie(m))
	return &MovieUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MovieClient) UpdateOneID(id int) *MovieUpdateOne {
	mutation := newMovieMutation(c.config, OpUpdateOne, withMovieID(id))
	return &MovieUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Movie.
func (c *MovieClient) Delete() *MovieDelete {
	mutation := newMovieMutation(c.config, OpDelete)
	return &MovieDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MovieClient) DeleteOne(m *Movie) *MovieDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MovieClient) DeleteOneID(id int) *MovieDeleteOne {
	builder := c.Delete().Where(movie.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MovieDeleteOne{builder}
}

// Query returns a query builder for Movie.
func (c *MovieClient) Query() *MovieQuery {
	return &MovieQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMovie},
		inters: c.Interceptors(),
	}
}

// Get returns a Movie entity by its id.
func (c *MovieClient) Get(ctx context.Context, id int) (*Movie, error) {
	return c.Query().Where(movie.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MovieClient) GetX(ctx context.Context, id int) *Movie {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuotes queries the quotes edge of a Movie.
func (c *MovieClient) QueryQuotes(m *Movie) *MovieQuoteQuery {
	query := (&MovieQuoteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(movie.Table, movie.FieldID, id),
			sqlgraph.To(moviequote.Table, moviequote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, movie.QuotesTable, movie.QuotesColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MovieClient) Hooks() []Hook {
	return c.hooks.Movie
}

// Interceptors returns the client interceptors.
func (c *MovieClient) Interceptors() []Interceptor {
	return c.inters.Movie
}

func (c *MovieClient) mutate(ctx context.Context, m *MovieMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MovieCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MovieUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MovieUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MovieDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Movie mutation op: %q", m.Op())
	}
}

// MovieQuoteClient is a client for the MovieQuote schema.
type MovieQuoteClient struct {
	config
}

// NewMovieQuoteClient returns a client for the MovieQuote from the given config.
func NewMovieQuoteClient(c config) *MovieQuoteClient {
	return &MovieQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `moviequote.Hooks(f(g(h())))`.
func (c *MovieQuoteClient) Use(hooks ...Hook) {
	c.hooks.MovieQuote = append(c.hooks.MovieQuote, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `moviequote.Intercept(f(g(h())))`.
func (c *MovieQuoteClient) Intercept(interceptors ...Interceptor) {
	c.inters.MovieQuote = append(c.inters.MovieQuote, interceptors...)
}

// Create returns a builder for creating a MovieQuote entity.
func (c *MovieQuoteClient) Create() *MovieQuoteCreate {
	mutation := newMovieQuoteMutation(c.config, OpCreate)
	return &MovieQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MovieQuote entities.
func (c *MovieQuoteClient) CreateBulk(builders ...*MovieQuoteCreate) *MovieQuoteCreateBulk {
	return &MovieQuoteCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MovieQuoteClient) MapCreateBulk(slice any, setFunc func(*MovieQuoteCreate, int)) *MovieQuoteCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MovieQuoteCreateBulk{err: fmt.Errorf("calling to MovieQuoteClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MovieQuoteCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MovieQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MovieQuote.
func (c *MovieQuoteClient) Update() *MovieQuoteUpdate {
	mutation := newMovieQuoteMutation(c.config, OpUpdate)
	return &MovieQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MovieQuoteClient) UpdateOne(mq *MovieQuote) *MovieQuoteUpdateOne {
	mutation := newMovieQuoteMutation(c.config, OpUpdateOne, withMovieQuote(mq))
	return &MovieQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MovieQuoteClient) UpdateOneID(id int) *MovieQuoteUpdateOne {
	mutation := newMovieQuoteMutation(c.config, OpUpdateOne, withMovieQuoteID(id))
	return &MovieQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MovieQuote.
func (c *MovieQuoteClient) Delete() *MovieQuoteDelete {
	mutation := newMovieQuoteMutation(c.config, OpDelete)
	return &MovieQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MovieQuoteClient) DeleteOne(mq *MovieQuote) *MovieQuoteDeleteOne {
	return c.DeleteOneID(mq.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MovieQuoteClient) DeleteOneID(id int) *MovieQuoteDeleteOne {
	builder := c.Delete().Where(moviequote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MovieQuoteDeleteOne{builder}
}

// Query returns a query builder for MovieQuote.
func (c *MovieQuoteClient) Query() *MovieQuoteQuery {
	return &MovieQuoteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMovieQuote},
		inters: c.Interceptors(),
	}
}

// Get returns a MovieQuote entity by its id.
func (c *MovieQuoteClient) Get(ctx context.Context, id int) (*MovieQuote, error) {
	return c.Query().Where(moviequote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MovieQuoteClient) GetX(ctx context.Context, id int) *MovieQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMovie queries the movie edge of a MovieQuote.
func (c *MovieQuoteClient) QueryMovie(mq *MovieQuote) *MovieQuery {
	query := (&MovieClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(moviequote.Table, moviequote.FieldID, id),
			sqlgraph.To(movie.Table, movie.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, moviequote.MovieTable, moviequote.MovieColumn),
		)
		fromV = sqlgraph.Neighbors(mq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCharacter queries the character edge of a MovieQuote.
func (c *MovieQuoteClient) QueryCharacter(mq *MovieQuote) *CharacterQuery {
	query := (&CharacterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(moviequote.Table, moviequote.FieldID, id),
			sqlgraph.To(character.Table, character.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, moviequote.CharacterTable, moviequote.CharacterColumn),
		)
		fromV = sqlgraph.Neighbors(mq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MovieQuoteClient) Hooks() []Hook {
	return c.hooks.MovieQuote
}

// Interceptors returns the client interceptors.
func (c *MovieQuoteClient) Interceptors() []Interceptor {
	return c.inters.MovieQuote
}

func (c *MovieQuoteClient) mutate(ctx context.Context, m *MovieQuoteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MovieQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MovieQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MovieQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MovieQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MovieQuote mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Character, Movie, MovieQuote []ent.Hook
	}
	inters struct {
		Character, Movie, MovieQuote []ent.Interceptor
	}
)
