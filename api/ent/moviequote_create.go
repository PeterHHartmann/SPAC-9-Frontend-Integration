// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api/ent/character"
	"api/ent/language"
	"api/ent/movie"
	"api/ent/moviequote"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MovieQuoteCreate is the builder for creating a MovieQuote entity.
type MovieQuoteCreate struct {
	config
	mutation *MovieQuoteMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (mqc *MovieQuoteCreate) SetCreatedAt(t time.Time) *MovieQuoteCreate {
	mqc.mutation.SetCreatedAt(t)
	return mqc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mqc *MovieQuoteCreate) SetNillableCreatedAt(t *time.Time) *MovieQuoteCreate {
	if t != nil {
		mqc.SetCreatedAt(*t)
	}
	return mqc
}

// SetUpdatedAt sets the "updated_at" field.
func (mqc *MovieQuoteCreate) SetUpdatedAt(t time.Time) *MovieQuoteCreate {
	mqc.mutation.SetUpdatedAt(t)
	return mqc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mqc *MovieQuoteCreate) SetNillableUpdatedAt(t *time.Time) *MovieQuoteCreate {
	if t != nil {
		mqc.SetUpdatedAt(*t)
	}
	return mqc
}

// SetQuote sets the "quote" field.
func (mqc *MovieQuoteCreate) SetQuote(s string) *MovieQuoteCreate {
	mqc.mutation.SetQuote(s)
	return mqc
}

// SetContext sets the "context" field.
func (mqc *MovieQuoteCreate) SetContext(s string) *MovieQuoteCreate {
	mqc.mutation.SetContext(s)
	return mqc
}

// SetMovieID sets the "movie" edge to the Movie entity by ID.
func (mqc *MovieQuoteCreate) SetMovieID(id int) *MovieQuoteCreate {
	mqc.mutation.SetMovieID(id)
	return mqc
}

// SetMovie sets the "movie" edge to the Movie entity.
func (mqc *MovieQuoteCreate) SetMovie(m *Movie) *MovieQuoteCreate {
	return mqc.SetMovieID(m.ID)
}

// SetCharacterID sets the "character" edge to the Character entity by ID.
func (mqc *MovieQuoteCreate) SetCharacterID(id int) *MovieQuoteCreate {
	mqc.mutation.SetCharacterID(id)
	return mqc
}

// SetCharacter sets the "character" edge to the Character entity.
func (mqc *MovieQuoteCreate) SetCharacter(c *Character) *MovieQuoteCreate {
	return mqc.SetCharacterID(c.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (mqc *MovieQuoteCreate) SetLanguageID(id int) *MovieQuoteCreate {
	mqc.mutation.SetLanguageID(id)
	return mqc
}

// SetNillableLanguageID sets the "language" edge to the Language entity by ID if the given value is not nil.
func (mqc *MovieQuoteCreate) SetNillableLanguageID(id *int) *MovieQuoteCreate {
	if id != nil {
		mqc = mqc.SetLanguageID(*id)
	}
	return mqc
}

// SetLanguage sets the "language" edge to the Language entity.
func (mqc *MovieQuoteCreate) SetLanguage(l *Language) *MovieQuoteCreate {
	return mqc.SetLanguageID(l.ID)
}

// Mutation returns the MovieQuoteMutation object of the builder.
func (mqc *MovieQuoteCreate) Mutation() *MovieQuoteMutation {
	return mqc.mutation
}

// Save creates the MovieQuote in the database.
func (mqc *MovieQuoteCreate) Save(ctx context.Context) (*MovieQuote, error) {
	mqc.defaults()
	return withHooks(ctx, mqc.sqlSave, mqc.mutation, mqc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mqc *MovieQuoteCreate) SaveX(ctx context.Context) *MovieQuote {
	v, err := mqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mqc *MovieQuoteCreate) Exec(ctx context.Context) error {
	_, err := mqc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mqc *MovieQuoteCreate) ExecX(ctx context.Context) {
	if err := mqc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mqc *MovieQuoteCreate) defaults() {
	if _, ok := mqc.mutation.CreatedAt(); !ok {
		v := moviequote.DefaultCreatedAt()
		mqc.mutation.SetCreatedAt(v)
	}
	if _, ok := mqc.mutation.UpdatedAt(); !ok {
		v := moviequote.DefaultUpdatedAt()
		mqc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mqc *MovieQuoteCreate) check() error {
	if _, ok := mqc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MovieQuote.created_at"`)}
	}
	if _, ok := mqc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MovieQuote.updated_at"`)}
	}
	if _, ok := mqc.mutation.Quote(); !ok {
		return &ValidationError{Name: "quote", err: errors.New(`ent: missing required field "MovieQuote.quote"`)}
	}
	if v, ok := mqc.mutation.Quote(); ok {
		if err := moviequote.QuoteValidator(v); err != nil {
			return &ValidationError{Name: "quote", err: fmt.Errorf(`ent: validator failed for field "MovieQuote.quote": %w`, err)}
		}
	}
	if _, ok := mqc.mutation.Context(); !ok {
		return &ValidationError{Name: "context", err: errors.New(`ent: missing required field "MovieQuote.context"`)}
	}
	if len(mqc.mutation.MovieIDs()) == 0 {
		return &ValidationError{Name: "movie", err: errors.New(`ent: missing required edge "MovieQuote.movie"`)}
	}
	if len(mqc.mutation.CharacterIDs()) == 0 {
		return &ValidationError{Name: "character", err: errors.New(`ent: missing required edge "MovieQuote.character"`)}
	}
	return nil
}

func (mqc *MovieQuoteCreate) sqlSave(ctx context.Context) (*MovieQuote, error) {
	if err := mqc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mqc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mqc.mutation.id = &_node.ID
	mqc.mutation.done = true
	return _node, nil
}

func (mqc *MovieQuoteCreate) createSpec() (*MovieQuote, *sqlgraph.CreateSpec) {
	var (
		_node = &MovieQuote{config: mqc.config}
		_spec = sqlgraph.NewCreateSpec(moviequote.Table, sqlgraph.NewFieldSpec(moviequote.FieldID, field.TypeInt))
	)
	if value, ok := mqc.mutation.CreatedAt(); ok {
		_spec.SetField(moviequote.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mqc.mutation.UpdatedAt(); ok {
		_spec.SetField(moviequote.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mqc.mutation.Quote(); ok {
		_spec.SetField(moviequote.FieldQuote, field.TypeString, value)
		_node.Quote = value
	}
	if value, ok := mqc.mutation.Context(); ok {
		_spec.SetField(moviequote.FieldContext, field.TypeString, value)
		_node.Context = value
	}
	if nodes := mqc.mutation.MovieIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviequote.MovieTable,
			Columns: []string{moviequote.MovieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(movie.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.movie_quotes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mqc.mutation.CharacterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviequote.CharacterTable,
			Columns: []string{moviequote.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.character_quotes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mqc.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviequote.LanguageTable,
			Columns: []string{moviequote.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.language_quotes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MovieQuoteCreateBulk is the builder for creating many MovieQuote entities in bulk.
type MovieQuoteCreateBulk struct {
	config
	err      error
	builders []*MovieQuoteCreate
}

// Save creates the MovieQuote entities in the database.
func (mqcb *MovieQuoteCreateBulk) Save(ctx context.Context) ([]*MovieQuote, error) {
	if mqcb.err != nil {
		return nil, mqcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mqcb.builders))
	nodes := make([]*MovieQuote, len(mqcb.builders))
	mutators := make([]Mutator, len(mqcb.builders))
	for i := range mqcb.builders {
		func(i int, root context.Context) {
			builder := mqcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MovieQuoteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mqcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mqcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mqcb *MovieQuoteCreateBulk) SaveX(ctx context.Context) []*MovieQuote {
	v, err := mqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mqcb *MovieQuoteCreateBulk) Exec(ctx context.Context) error {
	_, err := mqcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mqcb *MovieQuoteCreateBulk) ExecX(ctx context.Context) {
	if err := mqcb.Exec(ctx); err != nil {
		panic(err)
	}
}
