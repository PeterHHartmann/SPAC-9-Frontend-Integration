// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api/ent/character"
	"api/ent/movie"
	"api/ent/moviequote"
	"api/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCharacter  = "Character"
	TypeMovie      = "Movie"
	TypeMovieQuote = "MovieQuote"
)

// CharacterMutation represents an operation that mutates the Character nodes in the graph.
type CharacterMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	quotes        map[int]struct{}
	removedquotes map[int]struct{}
	clearedquotes bool
	done          bool
	oldValue      func(context.Context) (*Character, error)
	predicates    []predicate.Character
}

var _ ent.Mutation = (*CharacterMutation)(nil)

// characterOption allows management of the mutation configuration using functional options.
type characterOption func(*CharacterMutation)

// newCharacterMutation creates new mutation for the Character entity.
func newCharacterMutation(c config, op Op, opts ...characterOption) *CharacterMutation {
	m := &CharacterMutation{
		config:        c,
		op:            op,
		typ:           TypeCharacter,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCharacterID sets the ID field of the mutation.
func withCharacterID(id int) characterOption {
	return func(m *CharacterMutation) {
		var (
			err   error
			once  sync.Once
			value *Character
		)
		m.oldValue = func(ctx context.Context) (*Character, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Character.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCharacter sets the old Character of the mutation.
func withCharacter(node *Character) characterOption {
	return func(m *CharacterMutation) {
		m.oldValue = func(context.Context) (*Character, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CharacterMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CharacterMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CharacterMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CharacterMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Character.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CharacterMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CharacterMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Character entity.
// If the Character object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharacterMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CharacterMutation) ResetName() {
	m.name = nil
}

// AddQuoteIDs adds the "quotes" edge to the MovieQuote entity by ids.
func (m *CharacterMutation) AddQuoteIDs(ids ...int) {
	if m.quotes == nil {
		m.quotes = make(map[int]struct{})
	}
	for i := range ids {
		m.quotes[ids[i]] = struct{}{}
	}
}

// ClearQuotes clears the "quotes" edge to the MovieQuote entity.
func (m *CharacterMutation) ClearQuotes() {
	m.clearedquotes = true
}

// QuotesCleared reports if the "quotes" edge to the MovieQuote entity was cleared.
func (m *CharacterMutation) QuotesCleared() bool {
	return m.clearedquotes
}

// RemoveQuoteIDs removes the "quotes" edge to the MovieQuote entity by IDs.
func (m *CharacterMutation) RemoveQuoteIDs(ids ...int) {
	if m.removedquotes == nil {
		m.removedquotes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.quotes, ids[i])
		m.removedquotes[ids[i]] = struct{}{}
	}
}

// RemovedQuotes returns the removed IDs of the "quotes" edge to the MovieQuote entity.
func (m *CharacterMutation) RemovedQuotesIDs() (ids []int) {
	for id := range m.removedquotes {
		ids = append(ids, id)
	}
	return
}

// QuotesIDs returns the "quotes" edge IDs in the mutation.
func (m *CharacterMutation) QuotesIDs() (ids []int) {
	for id := range m.quotes {
		ids = append(ids, id)
	}
	return
}

// ResetQuotes resets all changes to the "quotes" edge.
func (m *CharacterMutation) ResetQuotes() {
	m.quotes = nil
	m.clearedquotes = false
	m.removedquotes = nil
}

// Where appends a list predicates to the CharacterMutation builder.
func (m *CharacterMutation) Where(ps ...predicate.Character) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CharacterMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CharacterMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Character, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CharacterMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CharacterMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Character).
func (m *CharacterMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CharacterMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, character.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CharacterMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case character.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CharacterMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case character.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Character field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CharacterMutation) SetField(name string, value ent.Value) error {
	switch name {
	case character.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Character field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CharacterMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CharacterMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CharacterMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Character numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CharacterMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CharacterMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CharacterMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Character nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CharacterMutation) ResetField(name string) error {
	switch name {
	case character.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Character field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CharacterMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.quotes != nil {
		edges = append(edges, character.EdgeQuotes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CharacterMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case character.EdgeQuotes:
		ids := make([]ent.Value, 0, len(m.quotes))
		for id := range m.quotes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CharacterMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedquotes != nil {
		edges = append(edges, character.EdgeQuotes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CharacterMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case character.EdgeQuotes:
		ids := make([]ent.Value, 0, len(m.removedquotes))
		for id := range m.removedquotes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CharacterMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedquotes {
		edges = append(edges, character.EdgeQuotes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CharacterMutation) EdgeCleared(name string) bool {
	switch name {
	case character.EdgeQuotes:
		return m.clearedquotes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CharacterMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Character unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CharacterMutation) ResetEdge(name string) error {
	switch name {
	case character.EdgeQuotes:
		m.ResetQuotes()
		return nil
	}
	return fmt.Errorf("unknown Character edge %s", name)
}

// MovieMutation represents an operation that mutates the Movie nodes in the graph.
type MovieMutation struct {
	config
	op            Op
	typ           string
	id            *int
	title         *string
	year          *int
	addyear       *int
	clearedFields map[string]struct{}
	quotes        map[int]struct{}
	removedquotes map[int]struct{}
	clearedquotes bool
	done          bool
	oldValue      func(context.Context) (*Movie, error)
	predicates    []predicate.Movie
}

var _ ent.Mutation = (*MovieMutation)(nil)

// movieOption allows management of the mutation configuration using functional options.
type movieOption func(*MovieMutation)

// newMovieMutation creates new mutation for the Movie entity.
func newMovieMutation(c config, op Op, opts ...movieOption) *MovieMutation {
	m := &MovieMutation{
		config:        c,
		op:            op,
		typ:           TypeMovie,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMovieID sets the ID field of the mutation.
func withMovieID(id int) movieOption {
	return func(m *MovieMutation) {
		var (
			err   error
			once  sync.Once
			value *Movie
		)
		m.oldValue = func(ctx context.Context) (*Movie, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Movie.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMovie sets the old Movie of the mutation.
func withMovie(node *Movie) movieOption {
	return func(m *MovieMutation) {
		m.oldValue = func(context.Context) (*Movie, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MovieMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MovieMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MovieMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MovieMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Movie.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *MovieMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *MovieMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *MovieMutation) ResetTitle() {
	m.title = nil
}

// SetYear sets the "year" field.
func (m *MovieMutation) SetYear(i int) {
	m.year = &i
	m.addyear = nil
}

// Year returns the value of the "year" field in the mutation.
func (m *MovieMutation) Year() (r int, exists bool) {
	v := m.year
	if v == nil {
		return
	}
	return *v, true
}

// OldYear returns the old "year" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldYear(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYear is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYear requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYear: %w", err)
	}
	return oldValue.Year, nil
}

// AddYear adds i to the "year" field.
func (m *MovieMutation) AddYear(i int) {
	if m.addyear != nil {
		*m.addyear += i
	} else {
		m.addyear = &i
	}
}

// AddedYear returns the value that was added to the "year" field in this mutation.
func (m *MovieMutation) AddedYear() (r int, exists bool) {
	v := m.addyear
	if v == nil {
		return
	}
	return *v, true
}

// ResetYear resets all changes to the "year" field.
func (m *MovieMutation) ResetYear() {
	m.year = nil
	m.addyear = nil
}

// AddQuoteIDs adds the "quotes" edge to the MovieQuote entity by ids.
func (m *MovieMutation) AddQuoteIDs(ids ...int) {
	if m.quotes == nil {
		m.quotes = make(map[int]struct{})
	}
	for i := range ids {
		m.quotes[ids[i]] = struct{}{}
	}
}

// ClearQuotes clears the "quotes" edge to the MovieQuote entity.
func (m *MovieMutation) ClearQuotes() {
	m.clearedquotes = true
}

// QuotesCleared reports if the "quotes" edge to the MovieQuote entity was cleared.
func (m *MovieMutation) QuotesCleared() bool {
	return m.clearedquotes
}

// RemoveQuoteIDs removes the "quotes" edge to the MovieQuote entity by IDs.
func (m *MovieMutation) RemoveQuoteIDs(ids ...int) {
	if m.removedquotes == nil {
		m.removedquotes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.quotes, ids[i])
		m.removedquotes[ids[i]] = struct{}{}
	}
}

// RemovedQuotes returns the removed IDs of the "quotes" edge to the MovieQuote entity.
func (m *MovieMutation) RemovedQuotesIDs() (ids []int) {
	for id := range m.removedquotes {
		ids = append(ids, id)
	}
	return
}

// QuotesIDs returns the "quotes" edge IDs in the mutation.
func (m *MovieMutation) QuotesIDs() (ids []int) {
	for id := range m.quotes {
		ids = append(ids, id)
	}
	return
}

// ResetQuotes resets all changes to the "quotes" edge.
func (m *MovieMutation) ResetQuotes() {
	m.quotes = nil
	m.clearedquotes = false
	m.removedquotes = nil
}

// Where appends a list predicates to the MovieMutation builder.
func (m *MovieMutation) Where(ps ...predicate.Movie) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MovieMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MovieMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Movie, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MovieMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MovieMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Movie).
func (m *MovieMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MovieMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.title != nil {
		fields = append(fields, movie.FieldTitle)
	}
	if m.year != nil {
		fields = append(fields, movie.FieldYear)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MovieMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case movie.FieldTitle:
		return m.Title()
	case movie.FieldYear:
		return m.Year()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MovieMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case movie.FieldTitle:
		return m.OldTitle(ctx)
	case movie.FieldYear:
		return m.OldYear(ctx)
	}
	return nil, fmt.Errorf("unknown Movie field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MovieMutation) SetField(name string, value ent.Value) error {
	switch name {
	case movie.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case movie.FieldYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYear(v)
		return nil
	}
	return fmt.Errorf("unknown Movie field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MovieMutation) AddedFields() []string {
	var fields []string
	if m.addyear != nil {
		fields = append(fields, movie.FieldYear)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MovieMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case movie.FieldYear:
		return m.AddedYear()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MovieMutation) AddField(name string, value ent.Value) error {
	switch name {
	case movie.FieldYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddYear(v)
		return nil
	}
	return fmt.Errorf("unknown Movie numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MovieMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MovieMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MovieMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Movie nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MovieMutation) ResetField(name string) error {
	switch name {
	case movie.FieldTitle:
		m.ResetTitle()
		return nil
	case movie.FieldYear:
		m.ResetYear()
		return nil
	}
	return fmt.Errorf("unknown Movie field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MovieMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.quotes != nil {
		edges = append(edges, movie.EdgeQuotes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MovieMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case movie.EdgeQuotes:
		ids := make([]ent.Value, 0, len(m.quotes))
		for id := range m.quotes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MovieMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedquotes != nil {
		edges = append(edges, movie.EdgeQuotes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MovieMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case movie.EdgeQuotes:
		ids := make([]ent.Value, 0, len(m.removedquotes))
		for id := range m.removedquotes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MovieMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedquotes {
		edges = append(edges, movie.EdgeQuotes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MovieMutation) EdgeCleared(name string) bool {
	switch name {
	case movie.EdgeQuotes:
		return m.clearedquotes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MovieMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Movie unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MovieMutation) ResetEdge(name string) error {
	switch name {
	case movie.EdgeQuotes:
		m.ResetQuotes()
		return nil
	}
	return fmt.Errorf("unknown Movie edge %s", name)
}

// MovieQuoteMutation represents an operation that mutates the MovieQuote nodes in the graph.
type MovieQuoteMutation struct {
	config
	op               Op
	typ              string
	id               *int
	quote            *string
	clearedFields    map[string]struct{}
	movie            *int
	clearedmovie     bool
	character        *int
	clearedcharacter bool
	done             bool
	oldValue         func(context.Context) (*MovieQuote, error)
	predicates       []predicate.MovieQuote
}

var _ ent.Mutation = (*MovieQuoteMutation)(nil)

// moviequoteOption allows management of the mutation configuration using functional options.
type moviequoteOption func(*MovieQuoteMutation)

// newMovieQuoteMutation creates new mutation for the MovieQuote entity.
func newMovieQuoteMutation(c config, op Op, opts ...moviequoteOption) *MovieQuoteMutation {
	m := &MovieQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeMovieQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMovieQuoteID sets the ID field of the mutation.
func withMovieQuoteID(id int) moviequoteOption {
	return func(m *MovieQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *MovieQuote
		)
		m.oldValue = func(ctx context.Context) (*MovieQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MovieQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMovieQuote sets the old MovieQuote of the mutation.
func withMovieQuote(node *MovieQuote) moviequoteOption {
	return func(m *MovieQuoteMutation) {
		m.oldValue = func(context.Context) (*MovieQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MovieQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MovieQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MovieQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MovieQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MovieQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetQuote sets the "quote" field.
func (m *MovieQuoteMutation) SetQuote(s string) {
	m.quote = &s
}

// Quote returns the value of the "quote" field in the mutation.
func (m *MovieQuoteMutation) Quote() (r string, exists bool) {
	v := m.quote
	if v == nil {
		return
	}
	return *v, true
}

// OldQuote returns the old "quote" field's value of the MovieQuote entity.
// If the MovieQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieQuoteMutation) OldQuote(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuote is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuote requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuote: %w", err)
	}
	return oldValue.Quote, nil
}

// ResetQuote resets all changes to the "quote" field.
func (m *MovieQuoteMutation) ResetQuote() {
	m.quote = nil
}

// SetMovieID sets the "movie" edge to the Movie entity by id.
func (m *MovieQuoteMutation) SetMovieID(id int) {
	m.movie = &id
}

// ClearMovie clears the "movie" edge to the Movie entity.
func (m *MovieQuoteMutation) ClearMovie() {
	m.clearedmovie = true
}

// MovieCleared reports if the "movie" edge to the Movie entity was cleared.
func (m *MovieQuoteMutation) MovieCleared() bool {
	return m.clearedmovie
}

// MovieID returns the "movie" edge ID in the mutation.
func (m *MovieQuoteMutation) MovieID() (id int, exists bool) {
	if m.movie != nil {
		return *m.movie, true
	}
	return
}

// MovieIDs returns the "movie" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MovieID instead. It exists only for internal usage by the builders.
func (m *MovieQuoteMutation) MovieIDs() (ids []int) {
	if id := m.movie; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMovie resets all changes to the "movie" edge.
func (m *MovieQuoteMutation) ResetMovie() {
	m.movie = nil
	m.clearedmovie = false
}

// SetCharacterID sets the "character" edge to the Character entity by id.
func (m *MovieQuoteMutation) SetCharacterID(id int) {
	m.character = &id
}

// ClearCharacter clears the "character" edge to the Character entity.
func (m *MovieQuoteMutation) ClearCharacter() {
	m.clearedcharacter = true
}

// CharacterCleared reports if the "character" edge to the Character entity was cleared.
func (m *MovieQuoteMutation) CharacterCleared() bool {
	return m.clearedcharacter
}

// CharacterID returns the "character" edge ID in the mutation.
func (m *MovieQuoteMutation) CharacterID() (id int, exists bool) {
	if m.character != nil {
		return *m.character, true
	}
	return
}

// CharacterIDs returns the "character" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CharacterID instead. It exists only for internal usage by the builders.
func (m *MovieQuoteMutation) CharacterIDs() (ids []int) {
	if id := m.character; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCharacter resets all changes to the "character" edge.
func (m *MovieQuoteMutation) ResetCharacter() {
	m.character = nil
	m.clearedcharacter = false
}

// Where appends a list predicates to the MovieQuoteMutation builder.
func (m *MovieQuoteMutation) Where(ps ...predicate.MovieQuote) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MovieQuoteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MovieQuoteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MovieQuote, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MovieQuoteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MovieQuoteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MovieQuote).
func (m *MovieQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MovieQuoteMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.quote != nil {
		fields = append(fields, moviequote.FieldQuote)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MovieQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case moviequote.FieldQuote:
		return m.Quote()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MovieQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case moviequote.FieldQuote:
		return m.OldQuote(ctx)
	}
	return nil, fmt.Errorf("unknown MovieQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MovieQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case moviequote.FieldQuote:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuote(v)
		return nil
	}
	return fmt.Errorf("unknown MovieQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MovieQuoteMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MovieQuoteMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MovieQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MovieQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MovieQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MovieQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MovieQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MovieQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MovieQuoteMutation) ResetField(name string) error {
	switch name {
	case moviequote.FieldQuote:
		m.ResetQuote()
		return nil
	}
	return fmt.Errorf("unknown MovieQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MovieQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.movie != nil {
		edges = append(edges, moviequote.EdgeMovie)
	}
	if m.character != nil {
		edges = append(edges, moviequote.EdgeCharacter)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MovieQuoteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case moviequote.EdgeMovie:
		if id := m.movie; id != nil {
			return []ent.Value{*id}
		}
	case moviequote.EdgeCharacter:
		if id := m.character; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MovieQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MovieQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MovieQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmovie {
		edges = append(edges, moviequote.EdgeMovie)
	}
	if m.clearedcharacter {
		edges = append(edges, moviequote.EdgeCharacter)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MovieQuoteMutation) EdgeCleared(name string) bool {
	switch name {
	case moviequote.EdgeMovie:
		return m.clearedmovie
	case moviequote.EdgeCharacter:
		return m.clearedcharacter
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MovieQuoteMutation) ClearEdge(name string) error {
	switch name {
	case moviequote.EdgeMovie:
		m.ClearMovie()
		return nil
	case moviequote.EdgeCharacter:
		m.ClearCharacter()
		return nil
	}
	return fmt.Errorf("unknown MovieQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MovieQuoteMutation) ResetEdge(name string) error {
	switch name {
	case moviequote.EdgeMovie:
		m.ResetMovie()
		return nil
	case moviequote.EdgeCharacter:
		m.ResetCharacter()
		return nil
	}
	return fmt.Errorf("unknown MovieQuote edge %s", name)
}
