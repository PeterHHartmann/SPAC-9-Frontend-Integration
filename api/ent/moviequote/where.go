// Code generated by ent, DO NOT EDIT.

package moviequote

import (
	"api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldEQ(FieldUpdatedAt, v))
}

// Quote applies equality check predicate on the "quote" field. It's identical to QuoteEQ.
func Quote(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldEQ(FieldQuote, v))
}

// Context applies equality check predicate on the "context" field. It's identical to ContextEQ.
func Context(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldEQ(FieldContext, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldLTE(FieldUpdatedAt, v))
}

// QuoteEQ applies the EQ predicate on the "quote" field.
func QuoteEQ(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldEQ(FieldQuote, v))
}

// QuoteNEQ applies the NEQ predicate on the "quote" field.
func QuoteNEQ(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldNEQ(FieldQuote, v))
}

// QuoteIn applies the In predicate on the "quote" field.
func QuoteIn(vs ...string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldIn(FieldQuote, vs...))
}

// QuoteNotIn applies the NotIn predicate on the "quote" field.
func QuoteNotIn(vs ...string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldNotIn(FieldQuote, vs...))
}

// QuoteGT applies the GT predicate on the "quote" field.
func QuoteGT(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldGT(FieldQuote, v))
}

// QuoteGTE applies the GTE predicate on the "quote" field.
func QuoteGTE(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldGTE(FieldQuote, v))
}

// QuoteLT applies the LT predicate on the "quote" field.
func QuoteLT(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldLT(FieldQuote, v))
}

// QuoteLTE applies the LTE predicate on the "quote" field.
func QuoteLTE(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldLTE(FieldQuote, v))
}

// QuoteContains applies the Contains predicate on the "quote" field.
func QuoteContains(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldContains(FieldQuote, v))
}

// QuoteHasPrefix applies the HasPrefix predicate on the "quote" field.
func QuoteHasPrefix(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldHasPrefix(FieldQuote, v))
}

// QuoteHasSuffix applies the HasSuffix predicate on the "quote" field.
func QuoteHasSuffix(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldHasSuffix(FieldQuote, v))
}

// QuoteEqualFold applies the EqualFold predicate on the "quote" field.
func QuoteEqualFold(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldEqualFold(FieldQuote, v))
}

// QuoteContainsFold applies the ContainsFold predicate on the "quote" field.
func QuoteContainsFold(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldContainsFold(FieldQuote, v))
}

// ContextEQ applies the EQ predicate on the "context" field.
func ContextEQ(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldEQ(FieldContext, v))
}

// ContextNEQ applies the NEQ predicate on the "context" field.
func ContextNEQ(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldNEQ(FieldContext, v))
}

// ContextIn applies the In predicate on the "context" field.
func ContextIn(vs ...string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldIn(FieldContext, vs...))
}

// ContextNotIn applies the NotIn predicate on the "context" field.
func ContextNotIn(vs ...string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldNotIn(FieldContext, vs...))
}

// ContextGT applies the GT predicate on the "context" field.
func ContextGT(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldGT(FieldContext, v))
}

// ContextGTE applies the GTE predicate on the "context" field.
func ContextGTE(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldGTE(FieldContext, v))
}

// ContextLT applies the LT predicate on the "context" field.
func ContextLT(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldLT(FieldContext, v))
}

// ContextLTE applies the LTE predicate on the "context" field.
func ContextLTE(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldLTE(FieldContext, v))
}

// ContextContains applies the Contains predicate on the "context" field.
func ContextContains(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldContains(FieldContext, v))
}

// ContextHasPrefix applies the HasPrefix predicate on the "context" field.
func ContextHasPrefix(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldHasPrefix(FieldContext, v))
}

// ContextHasSuffix applies the HasSuffix predicate on the "context" field.
func ContextHasSuffix(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldHasSuffix(FieldContext, v))
}

// ContextEqualFold applies the EqualFold predicate on the "context" field.
func ContextEqualFold(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldEqualFold(FieldContext, v))
}

// ContextContainsFold applies the ContainsFold predicate on the "context" field.
func ContextContainsFold(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldContainsFold(FieldContext, v))
}

// HasMovie applies the HasEdge predicate on the "movie" edge.
func HasMovie() predicate.MovieQuote {
	return predicate.MovieQuote(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MovieTable, MovieColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMovieWith applies the HasEdge predicate on the "movie" edge with a given conditions (other predicates).
func HasMovieWith(preds ...predicate.Movie) predicate.MovieQuote {
	return predicate.MovieQuote(func(s *sql.Selector) {
		step := newMovieStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLanguage applies the HasEdge predicate on the "language" edge.
func HasLanguage() predicate.MovieQuote {
	return predicate.MovieQuote(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLanguageWith applies the HasEdge predicate on the "language" edge with a given conditions (other predicates).
func HasLanguageWith(preds ...predicate.Language) predicate.MovieQuote {
	return predicate.MovieQuote(func(s *sql.Selector) {
		step := newLanguageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MovieQuote) predicate.MovieQuote {
	return predicate.MovieQuote(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MovieQuote) predicate.MovieQuote {
	return predicate.MovieQuote(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MovieQuote) predicate.MovieQuote {
	return predicate.MovieQuote(sql.NotPredicates(p))
}
