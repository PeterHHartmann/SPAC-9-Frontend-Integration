// Code generated by ent, DO NOT EDIT.

package moviequote

import (
	"api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldLTE(FieldID, id))
}

// Quote applies equality check predicate on the "quote" field. It's identical to QuoteEQ.
func Quote(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldEQ(FieldQuote, v))
}

// QuoteEQ applies the EQ predicate on the "quote" field.
func QuoteEQ(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldEQ(FieldQuote, v))
}

// QuoteNEQ applies the NEQ predicate on the "quote" field.
func QuoteNEQ(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldNEQ(FieldQuote, v))
}

// QuoteIn applies the In predicate on the "quote" field.
func QuoteIn(vs ...string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldIn(FieldQuote, vs...))
}

// QuoteNotIn applies the NotIn predicate on the "quote" field.
func QuoteNotIn(vs ...string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldNotIn(FieldQuote, vs...))
}

// QuoteGT applies the GT predicate on the "quote" field.
func QuoteGT(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldGT(FieldQuote, v))
}

// QuoteGTE applies the GTE predicate on the "quote" field.
func QuoteGTE(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldGTE(FieldQuote, v))
}

// QuoteLT applies the LT predicate on the "quote" field.
func QuoteLT(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldLT(FieldQuote, v))
}

// QuoteLTE applies the LTE predicate on the "quote" field.
func QuoteLTE(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldLTE(FieldQuote, v))
}

// QuoteContains applies the Contains predicate on the "quote" field.
func QuoteContains(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldContains(FieldQuote, v))
}

// QuoteHasPrefix applies the HasPrefix predicate on the "quote" field.
func QuoteHasPrefix(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldHasPrefix(FieldQuote, v))
}

// QuoteHasSuffix applies the HasSuffix predicate on the "quote" field.
func QuoteHasSuffix(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldHasSuffix(FieldQuote, v))
}

// QuoteEqualFold applies the EqualFold predicate on the "quote" field.
func QuoteEqualFold(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldEqualFold(FieldQuote, v))
}

// QuoteContainsFold applies the ContainsFold predicate on the "quote" field.
func QuoteContainsFold(v string) predicate.MovieQuote {
	return predicate.MovieQuote(sql.FieldContainsFold(FieldQuote, v))
}

// HasMovie applies the HasEdge predicate on the "movie" edge.
func HasMovie() predicate.MovieQuote {
	return predicate.MovieQuote(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MovieTable, MovieColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMovieWith applies the HasEdge predicate on the "movie" edge with a given conditions (other predicates).
func HasMovieWith(preds ...predicate.Movie) predicate.MovieQuote {
	return predicate.MovieQuote(func(s *sql.Selector) {
		step := newMovieStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCharacter applies the HasEdge predicate on the "character" edge.
func HasCharacter() predicate.MovieQuote {
	return predicate.MovieQuote(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CharacterTable, CharacterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCharacterWith applies the HasEdge predicate on the "character" edge with a given conditions (other predicates).
func HasCharacterWith(preds ...predicate.Character) predicate.MovieQuote {
	return predicate.MovieQuote(func(s *sql.Selector) {
		step := newCharacterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MovieQuote) predicate.MovieQuote {
	return predicate.MovieQuote(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MovieQuote) predicate.MovieQuote {
	return predicate.MovieQuote(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MovieQuote) predicate.MovieQuote {
	return predicate.MovieQuote(sql.NotPredicates(p))
}
