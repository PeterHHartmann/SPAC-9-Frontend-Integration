// Code generated by ent, DO NOT EDIT.

package movie

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the movie type in the database.
	Label = "movie"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldYear holds the string denoting the year field in the database.
	FieldYear = "year"
	// EdgeQuotes holds the string denoting the quotes edge name in mutations.
	EdgeQuotes = "quotes"
	// Table holds the table name of the movie in the database.
	Table = "movies"
	// QuotesTable is the table that holds the quotes relation/edge.
	QuotesTable = "movie_quotes"
	// QuotesInverseTable is the table name for the MovieQuote entity.
	// It exists in this package in order to avoid circular dependency with the "moviequote" package.
	QuotesInverseTable = "movie_quotes"
	// QuotesColumn is the table column denoting the quotes relation/edge.
	QuotesColumn = "movie_quotes"
)

// Columns holds all SQL columns for movie fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldYear,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
)

// OrderOption defines the ordering options for the Movie queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByYear orders the results by the year field.
func ByYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYear, opts...).ToFunc()
}

// ByQuotesCount orders the results by quotes count.
func ByQuotesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQuotesStep(), opts...)
	}
}

// ByQuotes orders the results by quotes terms.
func ByQuotes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuotesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newQuotesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuotesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, QuotesTable, QuotesColumn),
	)
}
