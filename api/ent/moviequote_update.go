// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api/ent/character"
	"api/ent/language"
	"api/ent/movie"
	"api/ent/moviequote"
	"api/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MovieQuoteUpdate is the builder for updating MovieQuote entities.
type MovieQuoteUpdate struct {
	config
	hooks    []Hook
	mutation *MovieQuoteMutation
}

// Where appends a list predicates to the MovieQuoteUpdate builder.
func (mqu *MovieQuoteUpdate) Where(ps ...predicate.MovieQuote) *MovieQuoteUpdate {
	mqu.mutation.Where(ps...)
	return mqu
}

// SetUpdatedAt sets the "updated_at" field.
func (mqu *MovieQuoteUpdate) SetUpdatedAt(t time.Time) *MovieQuoteUpdate {
	mqu.mutation.SetUpdatedAt(t)
	return mqu
}

// SetQuote sets the "quote" field.
func (mqu *MovieQuoteUpdate) SetQuote(s string) *MovieQuoteUpdate {
	mqu.mutation.SetQuote(s)
	return mqu
}

// SetNillableQuote sets the "quote" field if the given value is not nil.
func (mqu *MovieQuoteUpdate) SetNillableQuote(s *string) *MovieQuoteUpdate {
	if s != nil {
		mqu.SetQuote(*s)
	}
	return mqu
}

// SetContext sets the "context" field.
func (mqu *MovieQuoteUpdate) SetContext(s string) *MovieQuoteUpdate {
	mqu.mutation.SetContext(s)
	return mqu
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (mqu *MovieQuoteUpdate) SetNillableContext(s *string) *MovieQuoteUpdate {
	if s != nil {
		mqu.SetContext(*s)
	}
	return mqu
}

// SetMovieID sets the "movie" edge to the Movie entity by ID.
func (mqu *MovieQuoteUpdate) SetMovieID(id int) *MovieQuoteUpdate {
	mqu.mutation.SetMovieID(id)
	return mqu
}

// SetMovie sets the "movie" edge to the Movie entity.
func (mqu *MovieQuoteUpdate) SetMovie(m *Movie) *MovieQuoteUpdate {
	return mqu.SetMovieID(m.ID)
}

// SetCharacterID sets the "character" edge to the Character entity by ID.
func (mqu *MovieQuoteUpdate) SetCharacterID(id int) *MovieQuoteUpdate {
	mqu.mutation.SetCharacterID(id)
	return mqu
}

// SetCharacter sets the "character" edge to the Character entity.
func (mqu *MovieQuoteUpdate) SetCharacter(c *Character) *MovieQuoteUpdate {
	return mqu.SetCharacterID(c.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (mqu *MovieQuoteUpdate) SetLanguageID(id int) *MovieQuoteUpdate {
	mqu.mutation.SetLanguageID(id)
	return mqu
}

// SetNillableLanguageID sets the "language" edge to the Language entity by ID if the given value is not nil.
func (mqu *MovieQuoteUpdate) SetNillableLanguageID(id *int) *MovieQuoteUpdate {
	if id != nil {
		mqu = mqu.SetLanguageID(*id)
	}
	return mqu
}

// SetLanguage sets the "language" edge to the Language entity.
func (mqu *MovieQuoteUpdate) SetLanguage(l *Language) *MovieQuoteUpdate {
	return mqu.SetLanguageID(l.ID)
}

// Mutation returns the MovieQuoteMutation object of the builder.
func (mqu *MovieQuoteUpdate) Mutation() *MovieQuoteMutation {
	return mqu.mutation
}

// ClearMovie clears the "movie" edge to the Movie entity.
func (mqu *MovieQuoteUpdate) ClearMovie() *MovieQuoteUpdate {
	mqu.mutation.ClearMovie()
	return mqu
}

// ClearCharacter clears the "character" edge to the Character entity.
func (mqu *MovieQuoteUpdate) ClearCharacter() *MovieQuoteUpdate {
	mqu.mutation.ClearCharacter()
	return mqu
}

// ClearLanguage clears the "language" edge to the Language entity.
func (mqu *MovieQuoteUpdate) ClearLanguage() *MovieQuoteUpdate {
	mqu.mutation.ClearLanguage()
	return mqu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mqu *MovieQuoteUpdate) Save(ctx context.Context) (int, error) {
	mqu.defaults()
	return withHooks(ctx, mqu.sqlSave, mqu.mutation, mqu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mqu *MovieQuoteUpdate) SaveX(ctx context.Context) int {
	affected, err := mqu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mqu *MovieQuoteUpdate) Exec(ctx context.Context) error {
	_, err := mqu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mqu *MovieQuoteUpdate) ExecX(ctx context.Context) {
	if err := mqu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mqu *MovieQuoteUpdate) defaults() {
	if _, ok := mqu.mutation.UpdatedAt(); !ok {
		v := moviequote.UpdateDefaultUpdatedAt()
		mqu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mqu *MovieQuoteUpdate) check() error {
	if v, ok := mqu.mutation.Quote(); ok {
		if err := moviequote.QuoteValidator(v); err != nil {
			return &ValidationError{Name: "quote", err: fmt.Errorf(`ent: validator failed for field "MovieQuote.quote": %w`, err)}
		}
	}
	if mqu.mutation.MovieCleared() && len(mqu.mutation.MovieIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MovieQuote.movie"`)
	}
	if mqu.mutation.CharacterCleared() && len(mqu.mutation.CharacterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MovieQuote.character"`)
	}
	return nil
}

func (mqu *MovieQuoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mqu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(moviequote.Table, moviequote.Columns, sqlgraph.NewFieldSpec(moviequote.FieldID, field.TypeInt))
	if ps := mqu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mqu.mutation.UpdatedAt(); ok {
		_spec.SetField(moviequote.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mqu.mutation.Quote(); ok {
		_spec.SetField(moviequote.FieldQuote, field.TypeString, value)
	}
	if value, ok := mqu.mutation.Context(); ok {
		_spec.SetField(moviequote.FieldContext, field.TypeString, value)
	}
	if mqu.mutation.MovieCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviequote.MovieTable,
			Columns: []string{moviequote.MovieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(movie.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mqu.mutation.MovieIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviequote.MovieTable,
			Columns: []string{moviequote.MovieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(movie.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mqu.mutation.CharacterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviequote.CharacterTable,
			Columns: []string{moviequote.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mqu.mutation.CharacterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviequote.CharacterTable,
			Columns: []string{moviequote.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mqu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviequote.LanguageTable,
			Columns: []string{moviequote.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mqu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviequote.LanguageTable,
			Columns: []string{moviequote.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mqu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moviequote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mqu.mutation.done = true
	return n, nil
}

// MovieQuoteUpdateOne is the builder for updating a single MovieQuote entity.
type MovieQuoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MovieQuoteMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (mquo *MovieQuoteUpdateOne) SetUpdatedAt(t time.Time) *MovieQuoteUpdateOne {
	mquo.mutation.SetUpdatedAt(t)
	return mquo
}

// SetQuote sets the "quote" field.
func (mquo *MovieQuoteUpdateOne) SetQuote(s string) *MovieQuoteUpdateOne {
	mquo.mutation.SetQuote(s)
	return mquo
}

// SetNillableQuote sets the "quote" field if the given value is not nil.
func (mquo *MovieQuoteUpdateOne) SetNillableQuote(s *string) *MovieQuoteUpdateOne {
	if s != nil {
		mquo.SetQuote(*s)
	}
	return mquo
}

// SetContext sets the "context" field.
func (mquo *MovieQuoteUpdateOne) SetContext(s string) *MovieQuoteUpdateOne {
	mquo.mutation.SetContext(s)
	return mquo
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (mquo *MovieQuoteUpdateOne) SetNillableContext(s *string) *MovieQuoteUpdateOne {
	if s != nil {
		mquo.SetContext(*s)
	}
	return mquo
}

// SetMovieID sets the "movie" edge to the Movie entity by ID.
func (mquo *MovieQuoteUpdateOne) SetMovieID(id int) *MovieQuoteUpdateOne {
	mquo.mutation.SetMovieID(id)
	return mquo
}

// SetMovie sets the "movie" edge to the Movie entity.
func (mquo *MovieQuoteUpdateOne) SetMovie(m *Movie) *MovieQuoteUpdateOne {
	return mquo.SetMovieID(m.ID)
}

// SetCharacterID sets the "character" edge to the Character entity by ID.
func (mquo *MovieQuoteUpdateOne) SetCharacterID(id int) *MovieQuoteUpdateOne {
	mquo.mutation.SetCharacterID(id)
	return mquo
}

// SetCharacter sets the "character" edge to the Character entity.
func (mquo *MovieQuoteUpdateOne) SetCharacter(c *Character) *MovieQuoteUpdateOne {
	return mquo.SetCharacterID(c.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (mquo *MovieQuoteUpdateOne) SetLanguageID(id int) *MovieQuoteUpdateOne {
	mquo.mutation.SetLanguageID(id)
	return mquo
}

// SetNillableLanguageID sets the "language" edge to the Language entity by ID if the given value is not nil.
func (mquo *MovieQuoteUpdateOne) SetNillableLanguageID(id *int) *MovieQuoteUpdateOne {
	if id != nil {
		mquo = mquo.SetLanguageID(*id)
	}
	return mquo
}

// SetLanguage sets the "language" edge to the Language entity.
func (mquo *MovieQuoteUpdateOne) SetLanguage(l *Language) *MovieQuoteUpdateOne {
	return mquo.SetLanguageID(l.ID)
}

// Mutation returns the MovieQuoteMutation object of the builder.
func (mquo *MovieQuoteUpdateOne) Mutation() *MovieQuoteMutation {
	return mquo.mutation
}

// ClearMovie clears the "movie" edge to the Movie entity.
func (mquo *MovieQuoteUpdateOne) ClearMovie() *MovieQuoteUpdateOne {
	mquo.mutation.ClearMovie()
	return mquo
}

// ClearCharacter clears the "character" edge to the Character entity.
func (mquo *MovieQuoteUpdateOne) ClearCharacter() *MovieQuoteUpdateOne {
	mquo.mutation.ClearCharacter()
	return mquo
}

// ClearLanguage clears the "language" edge to the Language entity.
func (mquo *MovieQuoteUpdateOne) ClearLanguage() *MovieQuoteUpdateOne {
	mquo.mutation.ClearLanguage()
	return mquo
}

// Where appends a list predicates to the MovieQuoteUpdate builder.
func (mquo *MovieQuoteUpdateOne) Where(ps ...predicate.MovieQuote) *MovieQuoteUpdateOne {
	mquo.mutation.Where(ps...)
	return mquo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mquo *MovieQuoteUpdateOne) Select(field string, fields ...string) *MovieQuoteUpdateOne {
	mquo.fields = append([]string{field}, fields...)
	return mquo
}

// Save executes the query and returns the updated MovieQuote entity.
func (mquo *MovieQuoteUpdateOne) Save(ctx context.Context) (*MovieQuote, error) {
	mquo.defaults()
	return withHooks(ctx, mquo.sqlSave, mquo.mutation, mquo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mquo *MovieQuoteUpdateOne) SaveX(ctx context.Context) *MovieQuote {
	node, err := mquo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mquo *MovieQuoteUpdateOne) Exec(ctx context.Context) error {
	_, err := mquo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mquo *MovieQuoteUpdateOne) ExecX(ctx context.Context) {
	if err := mquo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mquo *MovieQuoteUpdateOne) defaults() {
	if _, ok := mquo.mutation.UpdatedAt(); !ok {
		v := moviequote.UpdateDefaultUpdatedAt()
		mquo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mquo *MovieQuoteUpdateOne) check() error {
	if v, ok := mquo.mutation.Quote(); ok {
		if err := moviequote.QuoteValidator(v); err != nil {
			return &ValidationError{Name: "quote", err: fmt.Errorf(`ent: validator failed for field "MovieQuote.quote": %w`, err)}
		}
	}
	if mquo.mutation.MovieCleared() && len(mquo.mutation.MovieIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MovieQuote.movie"`)
	}
	if mquo.mutation.CharacterCleared() && len(mquo.mutation.CharacterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MovieQuote.character"`)
	}
	return nil
}

func (mquo *MovieQuoteUpdateOne) sqlSave(ctx context.Context) (_node *MovieQuote, err error) {
	if err := mquo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(moviequote.Table, moviequote.Columns, sqlgraph.NewFieldSpec(moviequote.FieldID, field.TypeInt))
	id, ok := mquo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MovieQuote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mquo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, moviequote.FieldID)
		for _, f := range fields {
			if !moviequote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != moviequote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mquo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mquo.mutation.UpdatedAt(); ok {
		_spec.SetField(moviequote.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mquo.mutation.Quote(); ok {
		_spec.SetField(moviequote.FieldQuote, field.TypeString, value)
	}
	if value, ok := mquo.mutation.Context(); ok {
		_spec.SetField(moviequote.FieldContext, field.TypeString, value)
	}
	if mquo.mutation.MovieCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviequote.MovieTable,
			Columns: []string{moviequote.MovieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(movie.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mquo.mutation.MovieIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviequote.MovieTable,
			Columns: []string{moviequote.MovieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(movie.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mquo.mutation.CharacterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviequote.CharacterTable,
			Columns: []string{moviequote.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mquo.mutation.CharacterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviequote.CharacterTable,
			Columns: []string{moviequote.CharacterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(character.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mquo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviequote.LanguageTable,
			Columns: []string{moviequote.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mquo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviequote.LanguageTable,
			Columns: []string{moviequote.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MovieQuote{config: mquo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mquo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moviequote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mquo.mutation.done = true
	return _node, nil
}
